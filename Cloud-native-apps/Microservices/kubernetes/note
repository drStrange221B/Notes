1) create GCP account (Goole Cloud Provider). https://cloud.google.com. 
2) create kubernetes cluster.
3) Get Cloud SDK. cloud.google.com/sdk/docs/quickstart. This will help use to execute command to GCP on local laptop 
   using command Promt/terminal or the CLI that is provided by GCP.
4) Once Cloud SDK is install. Run - gcloud init
5) Accept the option to log in using google account.
6) click on the console button at the top right corner.
7) create project.
8) search Kubernetes. It will land on Kubernetes Engine dashboard.
9) Create a cluster. By default it will has three nodes.
10) 


Clusters: Kubernetes will handle cluster of nodes inside microservices architecture. Cluster is the collection of various servers working 
together to achieve some meaningful work.
A master not is present in cluster which will maintain all servers in the cluster. Any cluster will have Master Node and the Worker Nodes.
Worker node is responsible for all the work i.e accepting request from the clients and procesing it in their respective container. 
Master node will take care of the health of entire cluster (Worker Node). 

Role of Master Node is to make sure all the worker nodes are working properly. If there is any issue it will takes care of it.
It has 4 components:
1) Kube API Server: Master node exposes all API using Kube API servers.It is the gateway to Master node. It also acts as
   the gate keeper, so that only the authorized request goes through. UI and CLI ( Commnad Line Interface) with name Kube ctl
   or kube controller. Any time we need to interact with cluster, Master node is the only way to do that. Any instruction 
   for cluster such as add a node, remove node, self heal node. 
2) Scheduler: Request came thought kube API Server are passed on to Scheduler. It is responsible to work with worker node
   it does all the calculation and decides which worker node is suitable for the deployment.
3) Controller Manager: It is responsible for maintaining the health of the worker node. It acts based on the configuration
   and maintains the deisre state. Controller Manager works with ETCD to extract the necessary information details.
4) ETCD: It is the brain of the master node. It stores all the necessary info of cluster details in the key value pair. 
   
Worker Nodes: 
There can be any number of worker nodes, based on the traffic of the client request. Inside worker node there will 3 
important components.
1) Kublet: It is an agent that runs on each worker nodes. It is the gateway component. It acts as the bridge or getway 
   between worker node and master node.
2) Docker: all the apps/services are deployed to container using docker.
3) Kube-proxy: Kube-proxy is the gate way for clients where it authentica and authorize all the client request. 
4) Pod: Pod is the smallest deployment unit in worker node. Inside pods we deploy all the micro services. Ideally 
   each one container per pod. It acts as the small individual servers.


Kubernetes is so modular, flexible, and extensible that it can be deployed 0n-prem, in a third-parth data center, 
in any of the popular cloud providers and enven across multiple cloud providers.
Creating and maintaining a K8s cluster can be very challenge in on-prem. Due to that many exterprises looks for the 
cloud providers which will make their job easy to maintain their microservice architecture using Kubernetes
Below is the different famous cloud providers and their support to Kubernetes with the different names.
1) GCP - GKE ( Google Kubernetes Engine)
2) AWS - EKS ( Elastic Kubernetes Service)
3) Azure - AKS ( Azure Kubernetes Service)

Enable Logging: Search> API and Services > Enable API and Services
search> looging > select Cloud Logging API > Enable
search> Stackdriver API, Stackdriver Monitoring API, Stackdriver Trace API, Stackdriver Error Reporting API, Stackdriver Profiler API

Command-line-access:
gcloud container clusters get-credentials <cluster-name> --zone <zone-name> --project microservices-316111

Activate Cloud Shell:

Check if we have connected to cluster: 
>> kubectl get nodes      ## provides the nodes avilable in the cluster
>> gcloud --verson   ## check for the version of the cloud install


connect to cluster
gcloud container clusters get-credentials <cluster-name> --zone <zone-name> --project microservices-316111

check/get nodes
get nodes

check/get pods
get pods

check/get deployment
get deployment

check all the component under avilable in Kubernetes cluster
> kubectl get all

services (kube-proxy) is concept under Kubernetes, through which we connect to the outside clients

check/get exesting configuration
kubectl get configmap

apply/implement config
kubectl apply -f <config name>

delete configMap
>kubectl get configmap
>kubectl delete configmap <configmanpName>

Deploy micro services in kubernetes.
 check/get existing pods
 > kubectl get pods
 
 check existing deployments
 > kubectl get deployments
 
 check existing services: this expeses microservices to outer clients
 > kubectl get services
 
 check for replicaset
 > kubectl get replicaset
 
 deploy service
 > kubectl appluy -f <kubernetes deployment yml>
 
 Services type
 LoadBalancer: it is expeosed to outer client. It must have two IP address. cluster-ip is for enternal use where as 
               External-IP is for exposing to the external world.
 

